{"version":3,"sources":["ng://docks-angular/src/modules/docks/documentation-service.ts","ng://docks-angular/src/modules/docks/test-service.ts","ng://docks-angular/src/modules/docks/docks.component.ts","ng://docks-angular/src/modules/docks/sidebar.component.ts","ng://docks-angular/src/modules/docks/renderer.component.ts","ng://docks-angular/src/modules/docks/table-renderer.component.ts","ng://docks-angular/src/modules/docks/json-viewer.component.ts","ng://docks-angular/src/modules/docks/value-input.component.ts","ng://docks-angular/src/modules/docks/docks.module.ts"],"names":["DocumentationService","documentationService","props","methods","getters","dataProps","demo","demoOverlay","components","tests","view","sidebarState","argToShow","this","prototype","setDocs","DocsData","setDoc","doc","getThis","openedDoc","openDoc","states","getMarkup","p","push","name","length","join","json","obj","result","JSON","stringify","error","docName","el","path","emptyVal","toString","split","concat","reduce","accumulator","currentValue","undefined","indexOf","argsString","argsObj","exec","args","map","arg","trim","functionName","apply","TestService","testsAreRunning","class","modules","object literals","interfaces","variable","testService","setTests","testTypes","typesToTest","type","serviceTest","this_1","serviceTestTests_1","forEach","test","fors","for","Array","isArray","_for","children","childName","propName","testCases","canMap","asserts","assert","hasTestRan","testName","testResults","hasTestPassed","getTestAssertResult","index","hasTestAsserts","testIndex","assertKeys","element","isTestRunning","getTests","runAsserts","Promise","resolve","reject","results","runAssert","val","key","fn","pre","setResult","then","res","pass","message","catch","runTest","groupKey","_this","now","Date","getTime","running","setResults","finishAssert","passed","time","rej","runTestGroup","group","newPass","run","runTests","Object","keys","thisTestGroup","runGroup_1","groupIndex","thisTest","getFormatedTime","timestamp","DocksComponent","launch","ngOnInit","service","docs","initial","Component","selector","template","styles","Input","SidebarComponent","defineProperty","typeNames","typeName","getLink","docLinkName","toLowerCase","isDocumented","docLink","getDocLink","hasOwnProperty","setSidebarState","state","RendererComponent","data","properties","columns","label","required","attributeProperties","hasProperties","TableRendererComponent","getDocData","showJsonViewer","showText","isString","hasTest","row","hasArguments","console","log","JsonViewerComponent","JSONFormatter","hoverPreviewEnabled","hoverPreviewArrayCount","hoverPreviewFieldCount","render","outerHTML","ViewerInputComponent","getProxyModel","model","value","parseFloat","updateVal","proxyModel","parse","kind","showTextarea","DocksModule","NgModule","imports","CommonModule","FormsModule","declarations","exports"],"mappings":"meAAA,IAyHWA,EAAuB,IAzHlC,WAoHI,SAAAC,IACI,gBApHO,kBACC,oCACI,eAEP,CACLC,OAAO,EACPC,SAAS,EACTC,SAAS,EACTC,WAAW,EACXC,MAAM,EACNC,aAAa,EACbC,YAAY,EACZC,OAAO,EACPC,KAAM,GACNC,aAAc,GACdC,UAAW,IAqGJC,YAlGXZ,EAAAa,UAAAC,QAAA,SAAQC,GACJH,KAAKG,SAAWA,GAGpBf,EAAAa,UAAAG,OAAA,WAEI,OADAJ,KAAKK,IAAML,KAAKM,QAAQN,KAAKG,SAAUH,KAAKO,UAAW,IAChDP,KAAKK,KAGhBjB,EAAAa,UAAAO,QAAA,SAAQH,GACJL,KAAKO,UAAYF,EACjBL,KAAKS,OAAOZ,KAAO,aACnBG,KAAKI,UAGThB,EAAAa,UAAAS,UAAA,SAAUL,GACN,IAAMhB,EAAQ,GAEd,IAAK,IAAMsB,KAAKN,EAAIhB,MACZgB,EAAIhB,MAAMsB,IACVtB,EAAMuB,KAAK,IAAID,EAAC,eAAeA,EAAC,WAIxC,MAAO,IAAIN,EAAIQ,MAAOxB,EAAMyB,OAAS,OAAS,IAAKzB,EAAM0B,KAAK,SAAU1B,EAAMyB,OAAS,KAAO,IAAE,MAAMT,EAAIQ,KAAI,KAGlHzB,EAAAa,UAAAe,KAAA,SAAKC,GACD,IAAIC,EAAS,GAEb,IACIA,EAASC,KAAKC,UAAUH,EAAK,KAAM,QACrC,MAAOI,IAET,OAAOH,GAGX9B,EAAAa,UAAAqB,QAAA,SAAQjB,GAEJ,GAAKA,EAIL,OAAOA,EAAIQ,MASfzB,EAAAa,UAAAK,QAAA,SAAQiB,EAASC,EAA2BC,GAOxC,IAAMP,GALFM,EADAA,GAAQA,EAAKE,WAAWC,MACjB,CAACJ,GAAIK,OAAOJ,EAAKE,WAAWC,MAAM,MAElC,CAACJ,IAGQM,OAAO,SAAUC,EAAaC,GAC9C,GAAID,IAAgBE,UAChB,OAAOP,EAGX,IAAmC,IAA/BM,EAAaE,QAAQ,OAA4C,EAA7BF,EAAaE,QAAQ,KAAW,CACpE,IAAIC,EAAa,GAEXC,EAAU,aAAaC,KAAKL,GAE9BI,IACAD,EAAaC,EAAQ,IAAM,IAG/B,IAAME,EAAOH,EAAWP,MAAM,KAAKW,IAAI,SAACC,GAAQ,OAAAA,EAAIC,SAC9CC,EAAeV,EAAaJ,MAAM,KAAK,GAE7C,GAAyC,mBAA9BG,EAAYW,GAEnB,OADgBX,EAAYW,GAAcC,MAAMZ,EAAaO,GAKrE,OAAIN,EACOD,EAAYC,GAEZD,IAKf,OAAIZ,IAAWc,UACJP,EAGJP,KAjHf,IC8ZWyB,EAAc,IA5ZzB,iCACe,kBACC,uCACO,CACfC,iBAAiB,EACjBhD,MAAO,eAGE,kBACI,kBACA,CACbiD,QAAO,GACPlD,WAAY,GACZmD,QAAS,GACTC,kBAAmB,GACnBC,WAAY,GACZC,SAAU,yBAEI,UAElBC,EAAAjD,UAAAkD,SAAA,SAASvD,GACLI,KAAKJ,MAAQA,EACbI,KAAKoD,UAAUP,SAAQ1D,EAAqBmB,QAAQN,KAAKJ,MAAO,QAAS,IAEzE,IAAMyD,EAAc,CAChB,UACA,aACA,sBACA,WAGJ,IAAK,IAAMC,KAAQnE,EAAqBgB,SACpC,GAAIhB,EAAqBgB,SAASmD,GAAO,gBAE1BhC,GACP,GAAInC,EAAqBgB,SAASmD,GAAMhC,IAAwB,yBAAZA,GAAkD,gBAAZA,EAA2B,CAEjH,IAAMiC,EAAcpE,EAAqBmB,QAAQkD,EAAKJ,UAAcE,EAAI,IAAIhC,EAAW,CAAE1B,MAAO,KAC1F6D,EAAwB,GA6B9B,GA3BIF,EAAY3D,OACZ2D,EAAY3D,MAAM8D,QAAQ,SAACC,GACvB,IAAIC,EAAOD,EAAKE,OAMhB,GAJKD,IACDA,EAAOD,EAAK9C,MAGZ+C,GAAQE,MAAMC,QAAQH,GACtBA,EAAKF,QAAQ,SAAAM,GACJP,EAAiBO,GAKtBP,EAAiBO,GAAMpD,KAAK+C,GAJxBF,EAAiBO,GAAQ,CAACL,SAM/B,CACH,IAAKF,EAAiBG,GAElB,YADAH,EAAiBG,GAAQ,CAACD,IAG9BF,EAAiBG,GAAMhD,KAAK+C,MAKpCxE,EAAqBgB,SAASmD,GAAMhC,GAAS2C,SAAU,CACvD,IAAMA,EAAW9E,EAAqBgB,SAASmD,GAAMhC,GAAS2C,SAC9D,IAAK,IAAMC,KAAaD,EACpB,GAAIA,EAASC,IACHD,EAASC,KAAgD,EAAlCb,EAAYpB,QAAQiC,GAE7C,IAAK,IAAMC,KAAYF,EAASC,GAC5B,GAAID,EAASC,GAAWC,IAAsD,iBAAlCF,EAASC,GAAWC,GAAwB,CACpF,IAAMC,EAAYX,EAAiBU,GAC7BE,IAAWD,EACjBH,EAASC,GAAWC,GAAUvE,MAAQ6D,EAAiBU,GACvDF,EAASC,GAAWC,GAAUC,UAAYC,EAASD,EAAU9B,IAAI,SAACqB,GAC9D,IAAIW,EAAUX,EAAK9C,KAMnB,OAJI8C,EAAKW,SAAWX,EAAKW,QAAQhC,MAC7BgC,EAAUX,EAAKW,QAAQhC,IAAI,SAACiC,GAAgB,OAAAA,EAAO1D,QAGhD,CACHA,KAAM8C,EAAK9C,KACXyD,QAAOA,KAEV,cAvDrC,IAAK,IAAMhD,KAAWnC,EAAqBgB,SAASmD,KAAzChC,KAoEvB4B,EAAAjD,UAAAuE,WAAA,SAAWnE,EAAaoE,GAEpB,QAAKpE,GAIElB,EAAqBmB,QAAQN,KAAK0E,YAAY9E,MAAUS,EAAG,YAAYoE,IAGlFvB,EAAAjD,UAAA0E,cAAA,SAActE,EAAaoE,GAEvB,OAAKpE,EAIElB,EAAqBmB,QAAQN,KAAK0E,YAAY9E,MAAUS,EAAG,YAAYoE,EAAQ,SAH3EzC,WAMfkB,EAAAjD,UAAA2E,oBAAA,SAAoBvE,EAAaoE,EAAkBI,GAC/C,OAAKxE,EAIElB,EAAqBmB,QAAQN,KAAK0E,YAAY9E,MAAUS,EAAG,YAAYoE,EAAQ,YAAYI,GAHvF7C,WAMfkB,EAAAjD,UAAA6E,eAAA,SAAezE,EAAa0E,GAExB,IAAK1E,EACD,OAAO2B,UAGX,IAAMsC,EAAsBnF,EAAqBmB,QAAQN,KAAKJ,MAAUS,EAAG,UAAU0E,EAAS,YACxFC,EAA4B,GAYlC,OAVIV,GACAA,EAAQZ,QAAQ,SAAAuB,GACRA,EAAQpE,KACRmE,EAAWpE,KAAKqE,EAAQpE,MAExBmE,EAAWpE,KAAKqE,KAKrBD,GAGX9B,EAAAjD,UAAAiF,cAAA,SAAc7E,EAAaoE,GAEvB,OAAKpE,EAIAoE,EAIEtF,EAAqBmB,QAAQN,KAAK0E,YAAY9E,MAAUS,EAAG,YAAYoE,EAAQ,YAH3EtF,EAAqBmB,QAAQN,KAAK0E,YAAY9E,MAAUS,EAAG,YAJ3D2B,WAUfkB,EAAAjD,UAAAkF,SAAA,SAAS9E,GAEL,QAAKA,IAIEL,KAAKJ,MAAMS,IAAQ2B,YAG9BkB,EAAAjD,UAAAmF,WAAA,SAAWzB,GACP,OAAO,IAAI0B,QAAQ,SAACC,EAASC,GACzB5B,EAAK6B,QAAU,GAEf,IAAMC,EAAY,SAACZ,GACf,IAAKlB,EAAKW,QAAQO,GACd,OAAOS,EAAQ3B,EAAK6B,SAGxB,IAGIE,EAHAC,EAAWhC,EAAKW,QAAQO,GACxBe,EAAe,aACfC,EAAuB,KAGR,iBAARF,EACPC,EAAKjC,EAAKrE,QAAQqG,GACoB,iBAAxBhC,EAAKW,QAAQO,KAC3Bc,EAAMhC,EAAKW,QAAQO,GAAOhE,KAC1B+E,EAAKjC,EAAKW,QAAQO,GAAOe,GACzBC,EAAMlC,EAAKW,QAAQO,GAAOgB,KAAOA,GAGrC,IAAMC,EAAY,WACVJ,aAAeL,QACfK,EACKK,KAAK,SAAAC,GACFrC,EAAK6B,QAAQ5E,KAAK,CAAEqF,MAAM,EAAMC,QAASF,EAAKL,IAAGA,IACjDF,EAAUZ,EAAQ,KAErBsB,SAAM,SAAAH,GACHrC,EAAK6B,QAAQ5E,KAAK,CAAEqF,MAAM,EAAOC,QAASF,EAAKL,IAAGA,IAClDF,EAAUZ,EAAQ,MAG1BlB,EAAK6B,QAAQ5E,KAAK,CAAEqF,OAAQP,EAAKQ,QAASR,EAAKC,IAAGA,IAClDF,EAAUZ,EAAQ,KAIrBgB,EAIDA,IACKE,KAAK,WACFL,EAAME,IACNE,MAEHK,SAAM,WACHT,EAAME,IACNE,OAVRJ,EAAME,IACNE,MAcRL,EAAU,MAIlBvC,EAAAjD,UAAAmG,QAAA,SAAQzC,EAAW0C,EAAkB/C,GAArC,IAAAgD,EAAAtG,KACUuG,GAAM,IAAIC,MAAOC,UAEvB,OAAO,IAAIpB,QAAQ,SAACC,EAASC,GACzBe,EAAK5B,YAAY9B,iBAAkB,EAE9B0D,EAAK5B,YAAY9E,MAAM0D,KACxBgD,EAAK5B,YAAY9E,MAAM0D,GAAQ,IAG9BgD,EAAK5B,YAAY9E,MAAM0D,GAAM+C,KAC9BC,EAAK5B,YAAY9E,MAAM0D,GAAM+C,GAAY,CACrCJ,KAAM,EACNT,QAAS,GACTkB,SAAS,IAIjBJ,EAAK5B,YAAY9E,MAAM0D,GAAM+C,GAAUK,SAAU,EAEjD,IAAMC,EAAa,SAACX,GAKhB,OAJAM,EAAK5B,YAAY9E,MAAM0D,GAAM+C,GAAUK,SAAU,EACjDJ,EAAK5B,YAAY9E,MAAM0D,GAAM+C,GAAUb,QAAQ7B,EAAK9C,MAAQmF,EAC5DM,EAAK5B,YAAY9B,iBAAkB,EAE/BoD,EAAIC,KACGX,EAAQU,GAGZT,EAAOS,IAGZY,EAAe,SAACZ,GAClB,IAAIa,GAAS,EAEbb,EAAItC,QAAQ,SAACuB,GACJA,EAAQgB,OACTY,GAAS,KAIjBF,EAAW,CACPV,KAAMY,EACNX,QAAS,GACTY,MAAM,IAAIN,MAAOC,UAAYF,EAC7BG,SAAS,EACTlB,QAASQ,KAIjBM,EAAK5B,YAAY9E,MAAM0D,GAAM+C,GAAUb,QAAQ7B,EAAK9C,MAAQ,CACxDoF,KAAMjE,UACNkE,QAAS,GACTY,KAAM,EACNJ,SAAS,GAGT/C,EAAKW,SAAWX,EAAKW,QAAQxD,OAE7BwF,EAAKlB,WAAWzB,GAAMoC,KAAKa,EAAcA,GAElCjD,EAAKiC,IAAyB,mBAAZjC,EAAKiC,IAC9BjC,EAAKiC,KACAG,KAAK,SAACC,GACHW,EAAW,CACPV,MAAM,EACNC,QAAS,GACTY,MAAM,IAAIN,MAAOC,UAAYF,EAC7BG,SAAS,EACTlB,QAASQ,KAEd,SAACe,GACAJ,EAAW,CACPV,MAAM,EACNC,QAASa,EACTD,MAAM,IAAIN,MAAOC,UAAYF,EAC7BG,SAAS,EACTlB,QAASuB,SAQjC7D,EAAAjD,UAAA+G,aAAA,SAAaC,EAAY3D,GAAzB,IAAAgD,EAAAtG,KAEI,OAAO,IAAIqF,QAAQ,SAACC,EAASC,GAEzBe,EAAK5B,YAAY9E,MAAMqH,EAAMpG,MAAQ,CACjCoF,KAAMjE,UACNwD,QAAS,IAGb,IAAMmB,EAAa,SAACX,EAAUnB,GAC1B,IACMqC,GAD6D,IAA5CZ,EAAK5B,YAAY9E,MAAMqH,EAAMpG,MAAMoF,KACzBK,EAAK5B,YAAY9E,MAAMqH,EAAMpG,MAAMoF,KAAOD,EAAIC,KAE/EK,EAAK5B,YAAY9E,MAAMqH,EAAMpG,MAAMoF,KAAOiB,EAC1CZ,EAAK5B,YAAY9E,MAAMqH,EAAMpG,MAAM2E,QAAQyB,EAAMrH,MAAMiF,GAAOhE,MAAQmF,EAEtEmB,EAAItC,EAAQ,IAGVsC,EAAM,SAACtC,GACLoC,EAAMrH,MAAMiF,GACZyB,EAAKF,QAAQa,EAAMrH,MAAMiF,GAAQoC,EAAMpG,KAAMyC,GACxCyC,KAAK,SAACC,GACHW,EAAWX,EAAKnB,KAEnBsB,SAAM,SAACH,GACJW,EAAWX,EAAKnB,KAIxBS,EAAQgB,EAAK5B,YAAY9E,MAAMqH,EAAMpG,QAI7CsG,EAAI,MASZjE,EAAAjD,UAAAmH,SAAA,SAASzD,GAAT,IAAA2C,EAAAtG,KAEI,OAAO,IAAIqF,QAAQ,SAACC,EAASC,GAEzB,IAAM4B,EAAM,SAACtC,GACT,IAAMvB,EAAO+D,OAAOC,KAAKhB,EAAK1G,OAAOiF,GAC/B0C,EAAgBjB,EAAK1G,MAAM0D,GAEjC,GAAIiE,EAAe,CACf,IAAMC,EAAW,SAACC,GACd,IAAMC,EAAWH,EAAcF,OAAOC,KAAKC,GAAeE,IAEtDC,EACApB,EAAKU,aAAaU,EAAUpE,GACvByC,KAAK,SAACC,GACHM,EAAK5B,YAAY9E,MAAM0D,GAAMoE,EAAS7G,MAAQmF,EAC9CwB,EAASC,EAAa,IACvB,SAACV,GACAT,EAAK5B,YAAY9E,MAAM0D,GAAMoE,EAAS7G,MAAQkG,EAC9CS,EAASC,EAAa,KAG9BN,EAAItC,EAAQ,IAIpB2C,EAAS,QAETlC,EAAQgB,EAAK5B,YAAY9E,QAIjCuH,EAAI,MAIZjE,EAAAjD,UAAA0H,gBAAA,SAAgBC,GACZ,OAAIA,EAAY,IACLA,EAAY,KAGnBA,EAAY,IACJA,EAAY,IAAQ,IAG5BA,EAAY,KACJA,EAAY,IAAO,GAAM,IAG9B,MAxZf,ICFAC,EAAA,qCAkBmB1I,mBACIwD,SAcnBkF,EAAA5H,UAAA6H,OAAA,SAAOzH,KAGPwH,EAAA5H,UAAA8H,SAAA,WACI/H,KAAKgI,QAAQ9H,QAAQF,KAAKiI,MAC1BjI,KAAKkD,YAAYC,SAASnD,KAAKJ,OAE3BI,KAAKkI,SAA4B,KAAjBlI,KAAKkI,UACrBlI,KAAKgI,QAAQxH,QAAQR,KAAKkI,SAC1BlI,KAAKgI,QAAQvH,OAAOX,aAAeE,KAAKkI,QAAQvG,MAAM,KAAK,yBAtCtEwG,EAAAA,UAAS9F,KAAA,CAAC,CACP+F,SAAU,YACVC,SAAU,gOAQVC,OAAQ,CAAC,qkKAORC,EAAAA,MAAKlG,KAAA,CAAC,yBAGNkG,EAAAA,MAAKlG,KAAA,CAAC,0BAGNkG,EAAAA,MAAKlG,KAAA,CAAC,mCAGNkG,EAAAA,MAAKlG,KAAA,CAAC,yBA9BX,GCAAmG,EAAA,WAwBI,SAAAA,iBAEerJ,mBACIwD,SAEnB0E,OAAAoB,eAAID,EAAAvI,UAAA,YAAS,KAAb,WACI,OAAOoH,OAAOC,KAAKtH,KAAKgI,QAAQ7H,2CAGpCkH,OAAAoB,eAAID,EAAAvI,UAAA,YAAS,KAAb,WAAA,IAAAqG,EAAAtG,KAEI,OADYA,KAAK0I,UAAUpG,IAAI,SAAAqG,GAAY,OAAAtB,OAAOC,KAAKhB,EAAK0B,QAAQ7H,SAASwI,uCAIjFH,EAAAvI,UAAA2I,QAAA,SAAQC,EAAqBF,GACzB,OAAUA,EAASG,cAAa,IAAID,GAGxCL,EAAAvI,UAAA8I,aAAA,SAAaF,EAAqBF,GAC9B,IAAMK,EAAUhJ,KAAKiJ,WAAWJ,EAAaF,GAC7C,OAAOK,EAAQE,eAAe,kBAAoBF,EAAQD,cAG9DP,EAAAvI,UAAAgJ,WAAA,SAAWJ,EAAqBF,GAC5B,OAAO3I,KAAKgI,QAAQ1H,QAAQN,KAAKgI,QAAQ7H,SAAUH,KAAK4I,QAAQC,EAAaF,GAAW,KAG5FH,EAAAvI,UAAAkJ,gBAAA,SAAgBC,GACRpJ,KAAKgI,QAAQvH,OAAOX,eAAiBsJ,EAKzCpJ,KAAKgI,QAAQvH,OAAOX,aAAesJ,EAJ/BpJ,KAAKgI,QAAQvH,OAAOX,aAAe,wBAjD9CqI,EAAAA,UAAS9F,KAAA,CAAC,CACP+F,SAAU,cACVC,SAAU,o2BAcVC,OAAQ,CAAC,2gCApBb,GCAAe,EAAA,WAqDI,SAAAA,iBAEelK,mBACIwD,SAEnB0E,OAAAoB,eAAIY,EAAApJ,UAAA,aAAU,KAAd,WACI,MAAO,CACHqJ,KAAMtJ,KAAKgI,QAAQ3H,IAAI4D,SAASsF,WAChCC,QAAS,CAAC,CACN7D,IAAK,OACL8D,MAAO,QACR,CACC9D,IAAK,OACL8D,MAAO,OACPC,UAAU,GACX,CACC/D,IAAK,cACL8D,MAAO,cACPC,UAAU,GACX,CACC/D,IAAK,YACL8D,MAAO,iDAKnBpC,OAAAoB,eAAIY,EAAApJ,UAAA,UAAO,KAAX,WACI,MAAO,CACHqJ,KAAMtJ,KAAKgI,QAAQ3H,IAAI4D,SAAS3E,QAChCkK,QAAS,CAAC,CACN7D,IAAK,OACL8D,MAAO,QACR,CACC9D,IAAK,cACL8D,MAAO,cACPC,UAAU,GACX,CACC/D,IAAK,YACL8D,MAAO,aACR,CACCA,MAAO,UACP9D,IAAK,WACN,CACCA,IAAK,YACL8D,MAAO,iDAKnBpC,OAAAoB,eAAIY,EAAApJ,UAAA,iBAAc,KAAlB,WACI,MAAO,CACHqJ,KAAMtJ,KAAKgI,QAAQ3H,IAAI4D,SAAS0F,oBAChCH,QAAS,CAAC,CACN7D,IAAK,OACL8D,MAAO,QACR,CACC9D,IAAK,OACL8D,MAAO,OACPC,UAAU,GACX,CACC/D,IAAK,cACL8D,MAAO,cACPC,UAAU,GACX,CACC/D,IAAK,YACL8D,MAAO,iDAQnBpC,OAAAoB,eAAIY,EAAApJ,UAAA,eAAY,KAAhB,WACI,MAAO,CACHqJ,KAAMtJ,KAAKgI,QAAQ3H,IAAI4D,SAAS1E,QAChCiK,QAAS,CAAC,CACN7D,IAAK,OACL8D,MAAO,QACR,CACC9D,IAAK,cACL8D,MAAO,cACPC,UAAU,GACX,CACC/D,IAAK,UACL8D,MAAO,WACR,CACC9D,IAAK,YACL8D,MAAO,iDAKnBJ,EAAApJ,UAAA2J,cAAA,SAActG,GACV,IAAMW,EAAWjE,KAAKgI,QAAQ3H,IAAI4D,SAClC,OAAOA,GAAYA,EAASX,IAAS+D,OAAOC,KAAKrD,EAASX,IAAOxC,4BAhJxEqH,EAAAA,UAAS9F,KAAA,CAAC,CACP+F,SAAU,eACVC,SAAU,s9EA2CVC,OAAQ,CAAC,yiHAjDb,GCAAuB,EAAA,WA8CI,SAAAA,iBAEe1K,mBACIwD,SAQnB0E,OAAAoB,eAAIoB,EAAA5J,UAAA,qBAAkB,KAAtB,WACI,OAAOoH,OAAOC,KAAKtH,KAAKuJ,WAAWD,uCAGvCO,EAAA5J,UAAA2I,QAAA,SAAQC,EAAqBF,GACzB,OAAUA,EAASG,cAAa,IAAID,GAGxCgB,EAAA5J,UAAA6J,WAAA,SAAWjB,EAAqBF,GAC5B,OAAO3I,KAAKgI,QAAQ1H,QAAQN,KAAKgI,QAAQ7H,SAAUH,KAAK4I,QAAQC,EAAaF,GAAW,KAG5FkB,EAAA5J,UAAA8J,eAAA,SAAerE,GACX,QAASA,GAAsB,iBAARA,GAG3BmE,EAAA5J,UAAA+J,SAAA,SAASrE,GACL,MAAe,UAARA,GAA2B,cAARA,GAA+B,cAARA,GAGrDkE,EAAA5J,UAAAgK,SAAA,SAASvE,GACL,QAASA,GAAsB,iBAARA,GAG3BmE,EAAA5J,UAAAiK,QAAA,SAAQC,EAAKxE,GACT,OAAO3F,KAAKgI,QAAQ1H,QAAQN,KAAKuJ,WAAWD,KAASa,EAAG,IAAIxE,IAAU3F,KAAKgI,QAAQ1H,QAAQN,KAAKuJ,WAAWD,KAASa,EAAG,IAAIxE,EAAO,IAAI7E,QAG1I+I,EAAA5J,UAAAmK,aAAA,SAAaD,EAAKxE,GACd,GAAY,cAARA,EACA,OAAO,EAGX,IAAMD,EAAM1F,KAAKgI,QAAQ1H,QAAQN,KAAKuJ,WAAWD,KAASa,EAAG,IAAIxE,GAGjE,KAFgB7B,MAAMC,QAAQ2B,GAAOA,EAAM,IAAI5E,OAG3C,OAAO,EAGX,IAAImF,GAAO,EASX,OAPAP,EAAIhC,QAAQ,SAAAuB,GACRoF,QAAQC,IAAIrF,GACPA,EAAQiE,gBAAmBjE,EAAQiE,eAAe,UACnDjD,GAAO,KAIRA,uBAtGdkC,EAAAA,UAAS9F,KAAA,CAAC,CACP+F,SAAU,qBACVC,SAAU,srEAoCVC,OAAQ,CAAC,q4CASRC,EAAAA,MAAKlG,KAAA,CAAC,4BAGNkG,EAAAA,MAAKlG,KAAA,CAAC,mBAtDX,GCAAkI,EAAA,gCAcIlD,OAAAoB,eAAI8B,EAAAtK,UAAA,OAAI,KAAR,WAOI,OANkB,IAAIuK,EAAcxK,KAAKgB,KAAM,EAAG,CAC9CyJ,qBAAqB,EACrBC,uBAAwB,IACxBC,uBAAwB,IAGXC,SAASC,+DAlBjC1C,EAAAA,UAAS9F,KAAA,CAAC,CACP+F,SAAU,kBACVC,SAAU,iCACVC,OAAQ,CAAC,uHAKRC,EAAAA,MAAKlG,KAAA,CAAC,aAXX,GCAAyI,EAAA,wCAkBiB,aAEE,gBAEfA,EAAA7K,UAAA8K,cAAA,WACI,OAAQ/K,KAAKsD,MACT,IAAK,SACD,OAAOtD,KAAKgL,MAAMC,MAAQjL,KAAKgL,MAAMC,MAAMvJ,WAAa,GAC5D,IAAK,SACD,OAAO1B,KAAKgL,MAAMC,MAAQC,WAAWlL,KAAKgL,MAAMC,OAAS,EAC7D,IAAK,UACD,OAAOjL,KAAKgL,MAAMC,MAEtB,QACI,IAAIvF,EAAM1F,KAAKgL,MAAMC,MAErB,IACIvF,EAAMvE,KAAKC,UAAUpB,KAAKgL,MAAMC,OAClC,MAAO5J,IAET,OAAOqE,GAAO,OAI1BoF,EAAA7K,UAAAkL,UAAA,WACI,IAAIF,EAAQjL,KAAKoL,WAEjB,OAAQpL,KAAKsD,MACT,IAAK,SACDtD,KAAKgL,MAAMC,MAAQA,EAAQA,EAAMvJ,WAAa,GAC9C,MACJ,IAAK,SACD1B,KAAKgL,MAAMC,MAAQA,EAAQC,WAAWD,GAAS,EAC/C,MACJ,IAAK,UACDjL,KAAKgL,MAAMC,QAAUA,EACrB,MAEJ,QACI,IACIA,EAAQ9J,KAAKkK,MAAMJ,GACrB,MAAO5J,IAETrB,KAAKgL,MAAMC,MAAQA,GAAS,KAIxCH,EAAA7K,UAAA8H,SAAA,WACIsC,QAAQC,IAAItK,KAAKsD,KAAMtD,KAAKgL,OAE5BhL,KAAKoL,WAAapL,KAAK+K,gBACvB/K,KAAKsD,KAAOtD,KAAKgL,QAAQhL,KAAKgL,MAAM1H,MAAQtD,KAAKgL,MAAMM,OAAmB,UAG9ER,EAAA7K,UAAAsL,aAAA,WACI,MAAqB,WAAdvL,KAAKsD,MAAmC,WAAdtD,KAAKsD,0BAvE7C6E,EAAAA,UAAS9F,KAAA,CAAC,CACP+F,SAAU,kBACVC,SAAU,+bAMVC,OAAQ,CAAC,uCAKRC,EAAAA,MAAKlG,KAAA,CAAC,cAfX,GCAAmJ,EAAA,oDAUCC,EAAAA,SAAQpJ,KAAA,CAAC,CACRqJ,QAAS,CACPC,EAAAA,aACAC,EAAAA,aAEFC,aAAc,CACZhE,EACAW,EACAa,EACAQ,EACAU,EACAO,GAEFgB,QAAS,CAACjE,SAvBZ","sourcesContent":["export class documentationService {\n    doc: any = {}\n    openedDoc = 'doc-active-dropdown'\n    DocsData: any = {}\n\n    states = {\n        props: false,\n        methods: false,\n        getters: false,\n        dataProps: false,\n        demo: false,\n        demoOverlay: false,\n        components: false,\n        tests: false,\n        view: '',\n        sidebarState: ``,\n        argToShow: ``\n    }\n\n    setDocs(DocsData: any) {\n        this.DocsData = DocsData\n    }\n\n    setDoc() {\n        this.doc = this.getThis(this.DocsData, this.openedDoc, {})\n        return this.doc\n    }\n\n    openDoc(doc: string) {\n        this.openedDoc = doc\n        this.states.view = `components`\n        this.setDoc()\n    }\n\n    getMarkup(doc: any) {\n        const props = []\n\n        for (const p in doc.props) {\n            if (doc.props[p]) {\n                props.push(`:${p}=\"doc.props.${p}.value\"`)\n            }\n        }\n\n        return `<${doc.name}${props.length ? `\\n  ` : ``}${props.join('\\n  ')}${props.length ? `\\n` : ``}></${doc.name}>`\n    }\n\n    json(obj: any) {\n        let result = ``\n\n        try {\n            result = JSON.stringify(obj, null, '    ')\n        } catch (error) { }\n\n        return result\n    }\n\n    docName(doc: any) {\n\n        if (!doc) {\n            return\n        }\n\n        return doc.name\n    }\n\n    /**\n     * @param el The starting object\n     * @param path String to follow\n     * @param emptyVal What is returned if undefined\n     * @desc Navigates an object or array to find a value\n     */\n    getThis(el: any, path: Array<any> | string, emptyVal?: any) {\n        if (path && path.toString().split) {\n            path = [el].concat(path.toString().split(`.`))\n        } else {\n            path = [el]\n        }\n\n        const result = path.reduce(function (accumulator, currentValue) {\n            if (accumulator === undefined) {\n                return emptyVal\n            }\n\n            if (currentValue.indexOf(`.`) === -1 && currentValue.indexOf(`(`) > -1) {\n                let argsString = ''\n\n                const argsObj = /\\((.*?)\\)/g.exec(currentValue)\n\n                if (argsObj) {\n                    argsString = argsObj[1] || ``\n                }\n\n                const args = argsString.split(`,`).map((arg) => arg.trim())\n                const functionName = currentValue.split(`(`)[0]\n\n                if (typeof accumulator[functionName] === `function`) {\n                    const _result = accumulator[functionName].apply(accumulator, args)\n                    return _result\n                }\n            }\n\n            if (currentValue) {\n                return accumulator[currentValue]\n            } else {\n                return accumulator\n            }\n\n        })\n\n        if (result === undefined) {\n            return emptyVal\n        }\n\n        return result\n    }\n\n    constructor() {\n        return this\n    }\n}\n\nexport let DocumentationService = new documentationService()\n","import { DocumentationService } from './documentation-service'\n\nexport class testService {\n    doc: any = {}\n    openedDoc = 'doc-active-dropdown'\n    testResults: any = {\n        testsAreRunning: false,\n        tests: {}\n    }\n\n    tests: any = {}\n    flatTests: any = {}\n    testTypes: any = {\n        class: [],\n        components: [],\n        modules: [],\n        'object literals': [],\n        interfaces: [],\n        variable: []\n    }\n    shownTestsState = ``\n\n    setTests(tests: any) {\n        this.tests = tests\n        this.testTypes.class = DocumentationService.getThis(this.tests, `class`, [])\n\n        const typesToTest = [\n            `methods`,\n            `properties`,\n            `attributeProperties`,\n            `getters`\n        ]\n\n        for (const type in DocumentationService.DocsData) {\n            if (DocumentationService.DocsData[type]) {\n\n                for (const docName in DocumentationService.DocsData[type]) {\n                    if (DocumentationService.DocsData[type][docName] && docName !== `DocumentationService` && docName !== `TestService`) {\n\n                        const serviceTest = DocumentationService.getThis(this.testTypes, `${type}.${docName}`, { tests: [] })\n                        const serviceTestTests: any = {}\n\n                        if (serviceTest.tests) {\n                            serviceTest.tests.forEach((test: any) => {\n                                let fors = test.for\n\n                                if (!fors) {\n                                    fors = test.name\n                                }\n\n                                if (fors && Array.isArray(fors)) {\n                                    fors.forEach(_for => {\n                                        if (!serviceTestTests[_for]) {\n                                            serviceTestTests[_for] = [test]\n                                            return\n                                        }\n\n                                        serviceTestTests[_for].push(test)\n                                    })\n                                } else {\n                                    if (!serviceTestTests[fors]) {\n                                        serviceTestTests[fors] = [test]\n                                        return\n                                    }\n                                    serviceTestTests[fors].push(test)\n                                }\n                            })\n                        }\n\n                        if (DocumentationService.DocsData[type][docName].children) {\n                            const children = DocumentationService.DocsData[type][docName].children\n                            for (const childName in children) {\n                                if (children[childName]) {\n                                    if (!!children[childName] && typesToTest.indexOf(childName) > -1) {\n\n                                        for (const propName in children[childName]) {\n                                            if (children[childName][propName] && typeof children[childName][propName] === `object`) {\n                                                const testCases = serviceTestTests[propName]\n                                                const canMap = !!testCases\n                                                children[childName][propName].tests = serviceTestTests[propName]\n                                                children[childName][propName].testCases = canMap ? testCases.map((test: any) => {\n                                                    let asserts = test.name\n\n                                                    if (test.asserts && test.asserts.map) {\n                                                        asserts = test.asserts.map((assert: any) => assert.name)\n                                                    }\n\n                                                    return {\n                                                        name: test.name,\n                                                        asserts\n                                                    }\n                                                }) : []\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    hasTestRan(doc: string, testName: string) {\n\n        if (!doc) {\n            return false\n        }\n\n        return DocumentationService.getThis(this.testResults.tests, `${doc}.results.${testName}`)\n    }\n\n    hasTestPassed(doc: string, testName: string) {\n\n        if (!doc) {\n            return undefined\n        }\n\n        return DocumentationService.getThis(this.testResults.tests, `${doc}.results.${testName}.pass`)\n    }\n\n    getTestAssertResult(doc: string, testName: string, index: number) {\n        if (!doc) {\n            return undefined\n        }\n\n        return DocumentationService.getThis(this.testResults.tests, `${doc}.results.${testName}.results.${index}`)\n    }\n\n    hasTestAsserts(doc: string, testIndex: number) {\n\n        if (!doc) {\n            return undefined\n        }\n\n        const asserts: Array<any> = DocumentationService.getThis(this.tests, `${doc}.tests.${testIndex}.asserts`)\n        const assertKeys: Array<string> = []\n\n        if (asserts) {\n            asserts.forEach(element => {\n                if (element.name) {\n                    assertKeys.push(element.name)\n                } else {\n                    assertKeys.push(element)\n                }\n            })\n        }\n\n        return assertKeys\n    }\n\n    isTestRunning(doc: string, testName?: string) {\n\n        if (!doc) {\n            return undefined\n        }\n\n        if (!testName) {\n            return DocumentationService.getThis(this.testResults.tests, `${doc}.running`)\n        }\n\n        return DocumentationService.getThis(this.testResults.tests, `${doc}.results.${testName}.running`)\n    }\n\n    getTests(doc: string) {\n\n        if (!doc) {\n            return false\n        }\n\n        return this.tests[doc] || undefined\n    }\n\n    runAsserts(test: any) {\n        return new Promise((resolve, reject) => {\n            test.results = []\n\n            const runAssert = (index: number) => {\n                if (!test.asserts[index]) {\n                    return resolve(test.results)\n                }\n\n                let key: any = test.asserts[index]\n                let fn: Function = () => { }\n                let pre: Function | null = null\n                let val: any\n\n                if (typeof key === `string`) {\n                    fn = test.methods[key]\n                } else if (typeof test.asserts[index] === `object`) {\n                    key = test.asserts[index].name\n                    fn = test.asserts[index].fn\n                    pre = test.asserts[index].pre || pre\n                }\n\n                const setResult = () => {\n                    if (val instanceof Promise) {\n                        val\n                            .then(res => {\n                                test.results.push({ pass: true, message: res, key })\n                                runAssert(index + 1)\n                            })\n                            .catch(res => {\n                                test.results.push({ pass: false, message: res, key })\n                                runAssert(index + 1)\n                            })\n                    } else {\n                        test.results.push({ pass: !!val, message: val, key })\n                        runAssert(index + 1)\n                    }\n                }\n\n                if (!pre) {\n                    val = fn()\n                    setResult()\n                } else {\n                    pre()\n                        .then(() => {\n                            val = fn()\n                            setResult()\n                        })\n                        .catch(() => {\n                            val = fn()\n                            setResult()\n                        })\n                }\n            }\n\n            runAssert(0)\n        })\n    }\n\n    runTest(test: any, groupKey: string, type: string) {\n        const now = new Date().getTime()\n\n        return new Promise((resolve, reject) => {\n            this.testResults.testsAreRunning = true\n\n            if (!this.testResults.tests[type]) {\n                this.testResults.tests[type] = {}\n            }\n\n            if (!this.testResults.tests[type][groupKey]) {\n                this.testResults.tests[type][groupKey] = {\n                    pass: 0,\n                    results: {},\n                    running: true\n                }\n            }\n\n            this.testResults.tests[type][groupKey].running = true\n\n            const setResults = (res: any) => {\n                this.testResults.tests[type][groupKey].running = false\n                this.testResults.tests[type][groupKey].results[test.name] = res\n                this.testResults.testsAreRunning = false\n\n                if (res.pass) {\n                    return resolve(res)\n                }\n\n                return reject(res)\n            }\n\n            const finishAssert = (res: any) => {\n                let passed = true\n\n                res.forEach((element: any) => {\n                    if (!element.pass) {\n                        passed = false\n                    }\n                })\n\n                setResults({\n                    pass: passed,\n                    message: ``,\n                    time: new Date().getTime() - now,\n                    running: false,\n                    results: res\n                })\n            }\n\n            this.testResults.tests[type][groupKey].results[test.name] = {\n                pass: undefined,\n                message: ``,\n                time: 0,\n                running: true\n            }\n\n            if (test.asserts && test.asserts.length) {\n\n                this.runAsserts(test).then(finishAssert, finishAssert)\n\n            } else if (test.fn && typeof test.fn === `function`) {\n                test.fn()\n                    .then((res: any) => {\n                        setResults({\n                            pass: true,\n                            message: ``,\n                            time: new Date().getTime() - now,\n                            running: false,\n                            results: res\n                        })\n                    }, (rej: any) => {\n                        setResults({\n                            pass: false,\n                            message: rej,\n                            time: new Date().getTime() - now,\n                            running: false,\n                            results: rej\n                        })\n                    })\n            }\n        })\n\n    }\n\n    runTestGroup(group: any, type: string) {\n\n        return new Promise((resolve, reject) => {\n\n            this.testResults.tests[group.name] = {\n                pass: undefined,\n                results: {}\n            }\n\n            const setResults = (res: any, index: number) => {\n                const cantUpdatePass = this.testResults.tests[group.name].pass === false\n                const newPass = cantUpdatePass ? this.testResults.tests[group.name].pass : res.pass\n\n                this.testResults.tests[group.name].pass = newPass\n                this.testResults.tests[group.name].results[group.tests[index].name] = res\n\n                run(index + 1)\n            }\n\n            const run = (index: number) => {\n                if (group.tests[index]) {\n                    this.runTest(group.tests[index], group.name, type)\n                        .then((res: any) => {\n                            setResults(res, index)\n                        })\n                        .catch((res: any) => {\n                            setResults(res, index)\n                        })\n\n                } else {\n                    resolve(this.testResults.tests[group.name])\n                }\n            }\n\n            run(0)\n        })\n\n    }\n\n    /**\n     * @desc Runs all tests\n     * @param test - testing param description\n     */\n    runTests(test?: { id: string }) {\n\n        return new Promise((resolve, reject) => {\n\n            const run = (index: number) => {\n                const type = Object.keys(this.tests)[index]\n                const thisTestGroup = this.tests[type]\n\n                if (thisTestGroup) {\n                    const runGroup = (groupIndex: number) => {\n                        const thisTest = thisTestGroup[Object.keys(thisTestGroup)[groupIndex]]\n\n                        if (thisTest) {\n                            this.runTestGroup(thisTest, type)\n                                .then((res: any) => {\n                                    this.testResults.tests[type][thisTest.name] = res\n                                    runGroup(groupIndex + 1)\n                                }, (rej: any) => {\n                                    this.testResults.tests[type][thisTest.name] = rej\n                                    runGroup(groupIndex + 1)\n                                })\n                        } else {\n                            run(index + 1)\n                        }\n                    }\n\n                    runGroup(0)\n                } else {\n                    resolve(this.testResults.tests)\n                }\n            }\n\n            run(0)\n        })\n    }\n\n    getFormatedTime(timestamp: number) {\n        if (timestamp < 1000) {\n            return timestamp + `ms`\n        }\n\n        if (timestamp < 1000 * 60) {\n            return (timestamp / 1000) + `s`\n        }\n\n        if (timestamp < 1000 * 60 * 60) {\n            return (timestamp / 1000 * 60) + `m`\n        }\n\n        return ``\n    }\n}\n\nexport let TestService = new testService()\n","import { Component, Input, OnInit } from '@angular/core';\nimport { DocumentationService } from './documentation-service'\nimport { TestService } from './test-service'\n\n@Component({\n    selector: 'app-docks',\n    template: `<div id=\"documentation-overlay\">\n  <app-sidebar></app-sidebar>\n  <div class=\"doc-viewer\" [ngClass]=\"service.openedDoc\">\n    <div class=\"doc-container\">\n      <app-renderer></app-renderer>\n    </div>\n  </div>\n</div>`,\n    styles: [`@-webkit-keyframes rotating{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes rotating{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes fading{0%,100%{opacity:.3}50%{opacity:.8}}@keyframes fading{0%,100%{opacity:.3}50%{opacity:.8}}#documentation-overlay{position:fixed;top:0;left:0;height:100%;width:100%;z-index:9999999;background:#fff;overflow:hidden;display:flex;font-family:sans-serif}#documentation-overlay .red-flag{color:#d10005}#documentation-overlay #docs-close-button{position:fixed;top:7px;right:7px;color:#fff;background:#f3aa00;padding:7px;text-transform:uppercase;border-radius:50%;font-weight:700;width:32px;height:32px;display:flex;align-items:center;justify-content:center;font-size:15px;line-height:15px;cursor:pointer}#documentation-overlay button.disabled{opacity:.5;pointer-events:none}#documentation-overlay button{font-size:12px;border:none;padding:7px;outline:0!important}#documentation-overlay .test-asserts{font-size:12px}#documentation-overlay .test-asserts .test-assert{padding:7px 7px 7px 47px;background:rgba(35,71,100,.04)}#documentation-overlay .test-asserts .test-assert:nth-child(even){background:rgba(35,71,100,.09)}#documentation-overlay button.spin-if-running{transition:opacity .5s;margin-right:7px}#documentation-overlay button.spin-if-running.running{opacity:.5;pointer-events:none;-webkit-animation:2s linear infinite fading;animation:2s linear infinite fading}#documentation-overlay .spin-if-running.running>span{transition:-webkit-transform .2s;transition:transform .2s;transition:transform .2s,-webkit-transform .2s;-webkit-animation:2s linear infinite rotating;animation:2s linear infinite rotating}#documentation-overlay .spin-if-running>span{display:inline-block}#documentation-overlay button.spin-if-running>span{width:16px;height:16px}#documentation-overlay button.spin-if-running>span span{position:relative;left:1px;top:0;transition:left .2s}#documentation-overlay button.spin-if-running.running>span span{left:1px}#documentation-overlay .doc-viewer{height:100%;padding:14px;overflow:auto;width:100%;color:#234764}#documentation-overlay .doc-viewer li{list-style:none}#documentation-overlay .doc-viewer button{background:#f3aa00;color:#fff;cursor:pointer}#documentation-overlay .doc-viewer .doc-element p{margin:7px 0}#documentation-overlay .doc-viewer .doc-element p.description,#documentation-overlay .doc-viewer .doc-element p.subtitle{margin-bottom:21px}#documentation-overlay .doc-viewer .doc-element h2{margin:14px 0}#documentation-overlay .doc-viewer .doc-element section{margin:0 0 28px}#documentation-overlay .doc-viewer .doc-element input,#documentation-overlay .doc-viewer .doc-element select,#documentation-overlay .doc-viewer .doc-element textarea{background:#fff;border:none;height:32px;width:100%;max-width:210px;border-radius:1px;outline:0!important;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:10px;color:#234664;box-shadow:0 1px 1px rgba(0,0,0,.22);box-sizing:border-box}#documentation-overlay .doc-viewer .doc-element textarea{height:100px;resize:none}#documentation-overlay .doc-viewer a .example-code{width:100%;overflow:auto;padding:7px;background:#a18f74;color:#fff;font-size:12px;margin-bottom:21px}#documentation-overlay .doc-viewer .example-code pre{margin:0}#documentation-overlay .doc-viewer .h1{font-size:28px;font-weight:700;margin:21px 0}#documentation-overlay .doc-viewer .h2{font-size:18px;margin:14px 0 0;background:#234764;color:#fff;padding:10px;cursor:pointer}#documentation-overlay .doc-viewer .h2:before{content:\"\";border:7px solid transparent;border-left-color:#fff;width:0;height:0;display:inline-block}#documentation-overlay .doc-viewer .h2.active:before{border-left-color:transparent;border-top-color:#fff;position:relative;top:4px;left:-3px}#documentation-overlay .doc-viewer .h3{font-size:14px;margin:17px 0;font-weight:700}#documentation-overlay .doc-viewer .subtitle{font-size:14px;font-weight:100;vertical-align:baseline;margin-left:7px}#documentation-overlay .doc-viewer #demo-overlay{width:90%;height:90%}#documentation-overlay .doc-viewer pre.demo{font-size:12px;padding:7px;background:rgba(9,54,84,.1);overflow:auto}#documentation-overlay .doc-viewer #demo-overlay-container{position:fixed;width:100%;height:100%;top:0;left:0;display:flex;justify-content:center;align-items:center;z-index:999999999;color:#fff;overflow:auto}#documentation-overlay .doc-viewer #demo-overlay-close{position:fixed;top:14px;right:14px;font-size:14px;font-weight:700;background:rgba(255,255,255,.23);padding:7px;width:24px;height:24px;display:flex;justify-content:center;align-items:center;text-transform:uppercase;border-radius:50%;cursor:pointer}#documentation-overlay .doc-viewer .flex-vcenter{display:flex;align-items:center}#documentation-overlay .doc-viewer .test-group-header .h3{margin:0}.noTest{background:#a10005;color:#fff;padding:3px}.noTest *,.noTest .json-formatter-row,.noTest .json-formatter-row a,.noTest .json-formatter-row a:hover{color:#fff}.red-flag{color:#a10005}`]\n})\nexport class DocksComponent implements OnInit {\n\n    service: any = DocumentationService\n    testService: any = TestService\n\n    @Input('docs')\n    docs: any\n\n    @Input('initial')\n    initial: string\n\n    @Input('tests')\n    tests: any\n\n    @Input('componentClasses')\n    componentClasses: any\n\n    launch(doc: any) {\n    }\n\n    ngOnInit() {\n        this.service.setDocs(this.docs)\n        this.testService.setTests(this.tests)\n\n        if (this.initial && this.initial !== ``) {\n            this.service.openDoc(this.initial)\n            this.service.states.sidebarState = this.initial.split(`.`)[0]\n        }\n    }\n\n}\n","import { Component } from '@angular/core';\nimport { DocumentationService } from './documentation-service'\nimport { TestService } from './test-service'\n\n@Component({\n    selector: 'app-sidebar',\n    template: `<div class=\"doc-sidebar\">\n    <div *ngFor=\"let typeName of typeNames; let typeIndex = index\">\n        <div class=\"sidebar-heading group\" [ngClass]=\"{active: service.states.sidebarState === typeName}\" (click)=\"setSidebarState(typeName)\">{{typeName}}</div>\n        <div [ngClass]=\"{shown: service.states.sidebarState === typeName}\" class=\"link-group\">\n            <div class=\"doc-sidebar-link\" *ngFor=\"let docLinkName of linkNames[typeIndex]\" (click)=\"service.openDoc(getLink(docLinkName, typeName))\">\n                <span *ngIf=\"isDocumented(docLinkName, typeName)\" class=\"red-flag\"></span>\n                <span>{{getDocLink(docLinkName, typeName).name}}</span>\n            </div>\n        </div>\n    </div>\n    <div *ngIf=\"testService.tests\">\n        <div class=\"sidebar-heading\" (click)=\"service.states.view = 'tests'\">Tests</div>\n    </div>\n</div>`,\n    styles: [`.doc-sidebar{height:100%;background:#224764;color:#f0f4f8;white-space:nowrap;overflow:auto}.doc-sidebar .sidebar-heading{font-size:12px;font-weight:700;background:rgba(0,0,0,.21);padding:10px;box-shadow:0 -1px 0 rgba(0,0,0,.13);cursor:pointer;text-transform:uppercase}.doc-sidebar .sidebar-heading.group::before{content:\"\";border:5px solid transparent;border-left-color:#fff;width:0;height:0;display:inline-block}.doc-sidebar .sidebar-heading.group.active::before{border-left-color:transparent;border-top-color:#fff;position:relative;top:3px;left:-2px}.doc-sidebar .link-group{height:0;opacity:0;pointer-events:none;overflow:hidden}.doc-sidebar .link-group.shown{height:auto;opacity:1;pointer-events:all;overflow:auto}.doc-sidebar .doc-sidebar-link{padding:10px;box-shadow:0 -1px 0 rgba(76,112,141,.34),0 -2px 0 rgba(4,34,57,.25);cursor:pointer;font-size:12px}.doc-sidebar .doc-sidebar-link .red-flag{border:3px solid #a10005;border-radius:50%;display:inline-block;vertical-align:middle}`]\n})\nexport class SidebarComponent {\n\n    constructor() { }\n\n    service: any = DocumentationService\n    testService: any = TestService\n\n    get typeNames(): string[] {\n        return Object.keys(this.service.DocsData)\n    }\n\n    get linkNames(): Array<string[]> {\n        const map = this.typeNames.map(typeName => Object.keys(this.service.DocsData[typeName]))\n        return map\n    }\n\n    getLink(docLinkName: string, typeName: string): string {\n        return `${typeName.toLowerCase()}.${docLinkName}`\n    }\n\n    isDocumented(docLinkName: string, typeName: string): boolean {\n        const docLink = this.getDocLink(docLinkName, typeName)\n        return docLink.hasOwnProperty('isDocumented') && !docLink.isDocumented\n    }\n\n    getDocLink(docLinkName: string, typeName: string) {\n        return this.service.getThis(this.service.DocsData, this.getLink(docLinkName, typeName), {})\n    }\n\n    setSidebarState(state: string) {\n        if (this.service.states.sidebarState === state) {\n            this.service.states.sidebarState = ``\n            return\n        }\n\n        this.service.states.sidebarState = state\n    }\n}\n","import { Component } from '@angular/core';\nimport { DocumentationService } from './documentation-service'\nimport { TestService } from './test-service'\n\n@Component({\n    selector: 'app-renderer',\n    template: `<article class=\"doc-element\" *ngIf=\"service.states.view === 'components' && service.doc.name\">\n    <div class=\"h1 title\">{{ service.doc.name }}\n        <span class=\"subtitle\" *ngIf=\"service.doc.description\">{{ service.doc.description }}</span>\n    </div>\n    <section *ngIf=\"service.doc.body\">\n        <div [innerHTML]=\"service.doc.body\"></div>\n    </section>\n    <section *ngIf=\"service.doc.group === 'components'\">\n        <div class=\"h2\" (click)=\"service.states.demo = !service.states.demo\" [ngClass]=\"service.states.demo ? 'active' : ''\">Demo</div>\n        <div *ngIf=\"service.states.demo\">\n            <div>\n                <pre class=\"demo\"><code>{{service.getMarkup(service.doc)}}</code></pre>\n            </div>\n            <div>\n                <!-- <button (click)=\"launch(service.doc)\">Launch demo</button> -->\n            </div>\n            <div id=\"demo-overlay-container\" *ngIf=\"service.states.demoOverlay\">\n                <div id=\"demo-overlay-close\" (click)=\"service.states.demoOverlay = false\">x</div>\n                <div id=\"demo-overlay\"></div>\n            </div>\n        </div>\n    </section>\n\n    <section *ngIf=\"hasProperties('attributeProperties')\">\n        <div class=\"h2\" (click)=\"service.states.props = !service.states.props\" [ngClass]=\"service.states.props ? 'active' : ''\">Attribute properties</div>\n        <app-table-renderer [show]=\"service.states.props\" [properties]=\"attributeProps\"></app-table-renderer>\n    </section>\n\n    <section *ngIf=\"hasProperties('properties')\">\n        <div class=\"h2\" (click)=\"service.states.dataProps = !service.states.dataProps\" [ngClass]=\"service.states.dataProps ? 'active' : ''\">Properties</div>\n        <app-table-renderer [show]=\"service.states.dataProps\" [properties]=\"properties\"></app-table-renderer>\n    </section>\n\n    <section *ngIf=\"hasProperties('getters')\">\n        <div class=\"h2\" (click)=\"service.states.getters = !service.states.getters\" [ngClass]=\"service.states.getters ? 'active' : ''\">Getters</div>\n        <app-table-renderer [show]=\"service.states.getters\" [properties]=\"gettersProps\"></app-table-renderer>\n    </section>\n\n    <section *ngIf=\"hasProperties('methods')\">\n        <div class=\"h2\" (click)=\"service.states.methods = !service.states.methods\" [ngClass]=\"service.states.methods ? 'active' : ''\">Methods</div>\n        <app-table-renderer [show]=\"service.states.methods\" [properties]=\"methods\"></app-table-renderer>\n    </section>\n</article>`,\n    styles: [`@-webkit-keyframes rotating{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@keyframes rotating{0%{-webkit-transform:rotate(0);transform:rotate(0)}100%{-webkit-transform:rotate(360deg);transform:rotate(360deg)}}@-webkit-keyframes fading{0%,100%{opacity:.3}50%{opacity:.8}}@keyframes fading{0%,100%{opacity:.3}50%{opacity:.8}}.red-flag{color:#d10005}#docs-close-button{position:fixed;top:7px;right:7px;color:#fff;background:#f3aa00;padding:7px;text-transform:uppercase;border-radius:50%;font-weight:700;width:32px;height:32px;display:flex;align-items:center;justify-content:center;font-size:15px;line-height:15px;cursor:pointer}button.disabled{opacity:.5;pointer-events:none}button{font-size:12px;border:none;padding:7px;outline:0!important;background:#f3aa00;color:#fff;cursor:pointer}.test-asserts{font-size:12px}.test-asserts .test-assert{padding:7px 7px 7px 47px;background:rgba(35,71,100,.04)}.test-asserts .test-assert:nth-child(even){background:rgba(35,71,100,.09)}button.spin-if-running{transition:opacity .5s;margin-right:7px}button.spin-if-running.running{opacity:.5;pointer-events:none;-webkit-animation:2s linear infinite fading;animation:2s linear infinite fading}.spin-if-running.running>span{transition:-webkit-transform .2s;transition:transform .2s;transition:transform .2s,-webkit-transform .2s;-webkit-animation:2s linear infinite rotating;animation:2s linear infinite rotating}.spin-if-running>span{display:inline-block}button.spin-if-running>span{width:16px;height:16px}button.spin-if-running>span span{position:relative;left:1px;top:0;transition:left .2s}button.spin-if-running.running>span span{left:1px}.doc-viewer{height:100%;padding:14px;overflow:auto;width:100%;color:#234764}li{list-style:none}.doc-element p{margin:7px 0}.doc-element p.description,.doc-element p.subtitle{margin-bottom:21px}.doc-element h2{margin:14px 0}.doc-element section{margin:0 0 28px}.doc-element input,.doc-element select,.doc-element textarea{background:#fff;border:none;height:32px;width:100%;max-width:210px;border-radius:1px;outline:0!important;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:10px;color:#234664;box-shadow:0 1px 1px rgba(0,0,0,.22);box-sizing:border-box}.doc-element textarea{height:100px;resize:none}a .example-code{width:100%;overflow:auto;padding:7px;background:#a18f74;color:#fff;font-size:12px;margin-bottom:21px}.example-code pre{margin:0}.h1{font-size:28px;font-weight:700;margin:21px 0}.h2{font-size:18px;margin:14px 0 0;background:#234764;color:#fff;padding:10px;cursor:pointer}.h2:before{content:\"\";border:7px solid transparent;border-left-color:#fff;width:0;height:0;display:inline-block}.h2.active:before{border-left-color:transparent;border-top-color:#fff;position:relative;top:4px;left:-3px}.h3{font-size:14px;margin:17px 0;font-weight:700}.subtitle{font-size:14px;font-weight:100;vertical-align:baseline;margin-left:7px}#demo-overlay{width:90%;height:90%}pre.demo{font-size:12px;padding:7px;background:rgba(9,54,84,.1);overflow:auto}#demo-overlay-container{position:fixed;width:100%;height:100%;top:0;left:0;display:flex;justify-content:center;align-items:center;z-index:999999999;color:#fff;overflow:auto}#demo-overlay-close{position:fixed;top:14px;right:14px;font-size:14px;font-weight:700;background:rgba(255,255,255,.23);padding:7px;width:24px;height:24px;display:flex;justify-content:center;align-items:center;text-transform:uppercase;border-radius:50%;cursor:pointer}.flex-vcenter{display:flex;align-items:center}.test-group-header .h3{margin:0}`]\n})\nexport class RendererComponent {\n\n    constructor() { }\n\n    service: any = DocumentationService\n    testService: any = TestService\n\n    get properties() {\n        return {\n            data: this.service.doc.children.properties,\n            columns: [{\n                key: 'name',\n                label: 'name'\n            }, {\n                key: 'type',\n                label: 'type',\n                required: true\n            }, {\n                key: 'description',\n                label: 'description',\n                required: true\n            }, {\n                key: 'testCases',\n                label: 'test cases'\n            }]\n        }\n    }\n\n    get methods() {\n        return {\n            data: this.service.doc.children.methods,\n            columns: [{\n                key: 'name',\n                label: 'name'\n            }, {\n                key: 'description',\n                label: 'description',\n                required: true\n            }, {\n                key: 'arguments',\n                label: 'arguments'\n            }, {\n                label: 'returns',\n                key: 'returns'\n            }, {\n                key: 'testCases',\n                label: 'test cases'\n            }]\n        }\n    }\n\n    get attributeProps() {\n        return {\n            data: this.service.doc.children.attributeProperties,\n            columns: [{\n                key: 'name',\n                label: 'name'\n            }, {\n                key: 'type',\n                label: 'type',\n                required: true\n            }, {\n                key: 'description',\n                label: 'description',\n                required: true\n            }, {\n                key: 'testCases',\n                label: 'test cases'\n                // }, {\n                //     key: 'value',\n                //     label: 'value'\n            }]\n        }\n    }\n\n    get gettersProps() {\n        return {\n            data: this.service.doc.children.getters,\n            columns: [{\n                key: 'name',\n                label: 'name'\n            }, {\n                key: 'description',\n                label: 'description',\n                required: true\n            }, {\n                key: 'returns',\n                label: 'returns'\n            }, {\n                key: 'testCases',\n                label: 'test cases'\n            }]\n        }\n    }\n\n    hasProperties(type: string) {\n        const children = this.service.doc.children\n        return children && children[type] && Object.keys(children[type]).length\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport { DocumentationService } from './documentation-service'\nimport { TestService } from './test-service'\n\n@Component({\n    selector: 'app-table-renderer',\n    template: `<table *ngIf=\"show\" class=\"documentation-table\">\n    <thead>\n        <tr>\n            <th *ngFor=\"let column of properties.columns; let key = index\">{{column.label}}</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr *ngFor=\"let row of propertiesDataKeys; let rowIndex = index\">\n            <td *ngFor=\"let column of properties.columns; let key = index\" [ngClass]=\"column.label\">\n                <!-- <div v-if=\"column.key === 'value' && properties.data[row]\">\n                    <app-value-input [model]=\"properties.data[row]\"></app-value-input>\n                </div> -->\n                <div *ngIf=\"showText(column.key)\">\n                    <app-json-viewer *ngIf=\"showJsonViewer(properties.data[row][column.key])\" [json]=\"properties.data[row][column.key]\"></app-json-viewer>\n                    <div *ngIf=\"isString(properties.data[row][column.key])\" [innerHTML]=\"properties.data[row][column.key]\"></div>\n                </div>\n                <div *ngIf=\"hasArguments(row, column.key)\">\n                    <div *ngFor=\"let argument of properties.data[row][column.key]\" class=\"argument-container\">\n                        <div class=\"argument-name\">\n                            <b>{{argument.name}}</b>\n                            <span *ngIf=\"argument.isOptional\">: (optional)</span>\n                            <span class=\"argument-body\" *ngIf=\"argument.description\"> - {{argument.description}}</span>\n                        </div>\n                        <div class=\"argument-body red-flag\" *ngIf=\"!argument.description\">missing description</div>\n                        <div class=\"argument-object\" *ngIf=\"argument.type\">\n                            <app-json-viewer *ngIf=\"showJsonViewer(argument.type)\" [json]=\"argument.type\"></app-json-viewer>\n                        </div>\n                    </div>\n                </div>\n                <div *ngIf=\"column.key === 'testCases'\" [ngClass]=\"{noTest: !hasTest(row, column.key)}\">\n                    <app-json-viewer *ngIf=\"showJsonViewer(properties.data[row][column.key])\" [json]=\"properties.data[row][column.key]\"></app-json-viewer>\n                </div>\n            </td>\n        </tr>\n    </tbody>\n</table>`,\n    styles: [`.documentation-table{width:100%;text-align:left;border-collapse:collapse}.documentation-table td,.documentation-table th{vertical-align:top;padding:14px;font-size:12px}.documentation-table th{background:#a18f74;color:#fff;text-transform:uppercase}.documentation-table td{background:rgba(9,54,84,.05)}.documentation-table td .red-flag{font-family:monospace}.documentation-table td:nth-child(1){font-weight:700}.documentation-table td.type{text-transform:lowercase}.documentation-table tbody tr:nth-child(even)>td{background:rgba(9,54,84,.1)}.documentation-table td td,.documentation-table td th{padding:7px}.documentation-table td pre{font-family:sans-serif;font-size:12px;line-height:18px;background:rgba(255,255,255,.61);padding:7px;margin:0}.documentation-table .argument-container{margin:0 0 14px}.documentation-table .argument-container .argument-name{background:rgba(35,70,100,.15);padding:7px}.documentation-table .argument-container .argument-object{padding:5px 7px;background:rgba(255,255,255,.85)}.documentation-table .argument-container:last-child{margin:0}.documentation-table .noTest{background:#a10005;color:#fff;padding:3px}.documentation-table .noTest *,.documentation-table .noTest .json-formatter-row,.documentation-table .noTest .json-formatter-row a,.documentation-table .noTest .json-formatter-row a:hover{color:#fff}`]\n})\nexport class TableRendererComponent {\n\n    constructor() { }\n\n    service: any = DocumentationService\n    testService: any = TestService\n\n    @Input('show')\n    show: boolean\n\n    @Input('properties')\n    properties: any\n\n    get propertiesDataKeys() {\n        return Object.keys(this.properties.data)\n    }\n\n    getLink(docLinkName: string, typeName: string): string {\n        return `${typeName.toLowerCase()}.${docLinkName}`\n    }\n\n    getDocData(docLinkName: string, typeName: string) {\n        return this.service.getThis(this.service.DocsData, this.getLink(docLinkName, typeName), {})\n    }\n\n    showJsonViewer(val: any): boolean {\n        return !!val && typeof val !== `string`\n    }\n\n    showText(key: string): boolean {\n        return key !== 'value' && key !== 'arguments' && key !== 'testCases'\n    }\n\n    isString(val: any): boolean {\n        return !!val && typeof val === `string`\n    }\n\n    hasTest(row, key) {\n        return this.service.getThis(this.properties.data, `${row}.${key}`) && this.service.getThis(this.properties.data, `${row}.${key}`, []).length\n    }\n\n    hasArguments(row, key) {\n        if (key !== `arguments`) {\n            return false\n        }\n\n        const val = this.service.getThis(this.properties.data, `${row}.${key}`)\n        const length = (Array.isArray(val) ? val : []).length\n\n        if (!length) {\n            return false\n        }\n\n        let pass = true\n\n        val.forEach(element => {\n            console.log(element)\n            if (!element.hasOwnProperty || !element.hasOwnProperty(`name`)) {\n                pass = false\n            }\n        });\n\n        return pass\n    }\n}\n","import { Component, Input } from '@angular/core';\nimport JSONFormatter from 'json-formatter-js'\n\n@Component({\n    selector: 'app-json-viewer',\n    template: `<div [innerHTML]=\"html\"></div>`,\n    styles: [`.json-formatter-row .json-formatter-row,.json-formatter-row a{white-space:nowrap}`]\n})\n\nexport class JsonViewerComponent {\n\n    @Input('json')\n    json: any\n\n    get html(): string {\n        const formatter = new JSONFormatter(this.json, 0, {\n            hoverPreviewEnabled: false,\n            hoverPreviewArrayCount: 100,\n            hoverPreviewFieldCount: 5,\n        });\n\n        return formatter.render().outerHTML\n    }\n}\n","import { Component, Input, OnInit } from '@angular/core';\n\n@Component({\n    selector: 'app-value-input',\n    template: `<div class=\"value-input\">\n    <textarea *ngIf=\"showTextarea()\" [(ngModel)]=\"proxyModel\" (input)=\"updateVal\"></textarea>\n    <!-- <input type=\"number\" *ngIf=\"type === 'number'\" [(ngModel)]=\"proxyModel\" (input)=\"updateVal\">\n    <input type=\"text\" *ngIf=\"type === 'string'\" [(ngModel)]=\"proxyModel\" (input)=\"updateVal\">\n    <input type=\"checkbox\" *ngIf=\"type === 'boolean'\" [(ngModel)]=\"proxyModel\" (input)=\"updateVal\"> -->\n</div>`,\n    styles: [``]\n})\n\nexport class ViewerInputComponent implements OnInit {\n\n    @Input('model')\n    model: any\n\n    proxyModel = ``\n\n    type: string = `string`\n\n    getProxyModel() {\n        switch (this.type) {\n            case `string`:\n                return this.model.value ? this.model.value.toString() : ``\n            case `number`:\n                return this.model.value ? parseFloat(this.model.value) : 0\n            case `boolean`:\n                return this.model.value\n\n            default:\n                let val = this.model.value\n\n                try {\n                    val = JSON.stringify(this.model.value)\n                } catch (error) { }\n\n                return val || `{}`\n        }\n    }\n\n    updateVal() {\n        let value = this.proxyModel\n\n        switch (this.type) {\n            case `string`:\n                this.model.value = value ? value.toString() : ``\n                break\n            case `number`:\n                this.model.value = value ? parseFloat(value) : 0\n                break\n            case `boolean`:\n                this.model.value = !!value\n                break\n\n            default:\n                try {\n                    value = JSON.parse(value)\n                } catch (error) { }\n\n                this.model.value = value || {}\n        }\n    }\n\n    ngOnInit() {\n        console.log(this.type, this.model);\n\n        this.proxyModel = this.getProxyModel()\n        this.type = this.model ? this.model.type || this.model.kind || `string` : `string`\n    }\n\n    showTextarea() {\n        return this.type !== 'string' && this.type !== 'number'\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { DocksComponent } from './docks.component';\nimport { SidebarComponent } from './sidebar.component';\nimport { RendererComponent } from './renderer.component';\nimport { TableRendererComponent } from './table-renderer.component';\nimport { JsonViewerComponent } from './json-viewer.component';\nimport { ViewerInputComponent } from './value-input.component'\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule\n  ],\n  declarations: [\n    DocksComponent,\n    SidebarComponent,\n    RendererComponent,\n    TableRendererComponent,\n    JsonViewerComponent,\n    ViewerInputComponent\n  ],\n  exports: [DocksComponent]\n})\nexport class DocksModule { }\n"]}